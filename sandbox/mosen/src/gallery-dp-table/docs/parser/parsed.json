{"majorversion": 3, "filemap": {"dp-table-selection-plugin.js": {"classlist": [], "name": "dp-table-selection-plugin.js", "module": "gallery-dp-table-headers"}, "dp-table-cellrenderers.js": {"classlist": [], "name": "dp-table-cellrenderers.js", "module": "DP.Table"}, "dp-table-headers.js": {"classlist": ["Y.DP.TableHeaders"], "name": "dp-table-headers.js", "module": "DP.Table"}, "dp-table-body.js": {"classlist": ["Y.DP.TableBase"], "name": "dp-table-body.js", "module": "DP.Table"}}, "modules": {"gallery-dp-table-headers": {"description": "DP Table Headers", "submodules": [], "classlist": ["Y.DP.TableHeaders"], "filelist": ["dp-table-selection-plugin.js"], "subdata": {}, "guessedname": "SORT_ASC", "guessedtype": "property", "requires": "widget, substitute", "name": "gallery-dp-table-headers"}, "DP.Table": {"description": "DP Table", "submodules": [], "classlist": ["Y.DP.TableBase"], "filelist": ["dp-table-body.js", "dp-table-cellrenderers.js", "dp-table-headers.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "requires": "widget, substitute, classnamemanager", "name": "DP.Table"}}, "classmap": {"Y.DP.TableBase": {"name": "Y.DP.TableBase", "configs": {"loading": {"default": "false", "type": "Boolean", "description": "Whether the table is loading new data or not.", "guessedname": "loading", "guessedtype": "property"}, "data": {"default": "null", "type": "Array", "description": "The most recent set of results returned by the datasource.", "guessedname": "data", "guessedtype": "property"}, "dataSource": {"default": "null", "type": "Y.DataSource", "description": "Active Y.DataSource instance, used to populate the", "guessedname": "dataSource", "guessedtype": "property"}, "queryParameters": {"default": "Empty array", "type": "Array", "description": "Array of params\nA change in parameters causes a table reload.", "guessedname": "queryParameters", "guessedtype": "property"}}, "namespace": "Y.DP", "module": "DP.Table", "events": {"loadingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingChange", "description": "Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryParametersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryParametersChange", "description": "Fires when the value for the configuration attribute 'queryParameters' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataSourceChange", "description": "Fires when the value for the configuration attribute 'dataSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TableBody", "methods": {"load": {"description": "Load data from the provided Y.DataSource Instance", "public": "", "guessedname": "load", "guessedtype": "function"}, "_defLoadingFn": {"params": [{"type": "Event", "name": "e", "description": "  Event"}], "description": "Default handler for the loading event", "guessedname": "_defLoadingFn", "guessedtype": "function"}, "_afterLoadingChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  custom event"}], "description": "Update widget ui to reflect loading state change.", "guessedname": "_afterLoadingChange", "guessedtype": "function"}, "_defResponseSuccessFn": {"params": [{"type": "Object", "name": "o", "description": "  Response object"}], "description": "Default handler for table:success (DataSource.IO Response Success)", "guessedname": "_defResponseSuccessFn", "guessedtype": "function"}, "hash": {"return": {"type": "", "description": "Function"}, "params": [{"type": "", "name": "el", "description": " String Selector for element holding hash values."}], "description": "Format a field where the value is a key to a hash, defined as a json object on the page.", "guessedname": "hash", "guessedtype": "function"}, "syncUI": {"see": "Widget.syncUI", "guessedname": "syncUI", "guessedtype": "function"}, "niceDate": {"params": [{"type": "Object", "name": "data", "description": "  row data"}, {"type": "String", "name": "field", "description": "  field name"}, {"type": "Node", "name": "cellNode", "description": "  TD cell reference"}], "description": "Format a date field, using nice words for days if the date is close to the current date.", "guessedname": "niceDate", "guessedtype": "function"}, "_afterDataChange": {"protected": "", "description": "New data handler, causes table to re-render", "guessedname": "_afterDataChange", "guessedtype": "function"}, "_afterQueryParametersChange": {"protected": "", "description": "A change in query parameters will rebuild the request string and reload the datasource.", "guessedname": "_afterQueryParametersChange", "guessedtype": "function"}, "_renderTableRows": {"protected": "", "description": "Render the rows contained in the data attribute.", "guessedname": "_renderTableRows", "guessedtype": "function"}, "destructor": {"description": "Destructor, implemented for Y.Base", "guessedname": "destructor", "guessedtype": "function"}, "handleParameterChange": {"public": "", "params": [{"type": "Event", "name": "e", "description": "  CustomEvent"}], "description": "Public handler for parameterchange events.\nThe subject supplies its list of parameters to us, which we then apply to our locally maintained list of parameters.\nOur afterChange then applies those to a datasource request.", "guessedname": "handleParameterChange", "guessedtype": "function"}, "_handleResponse": {"protected": "", "params": [{"type": "String", "name": "type", "description": "  Event type"}, {"type": "Object", "name": "e", "description": "  Response Object"}], "description": "Single interface for io responses, fires custom event at each stage of datasource request.", "guessedname": "_handleResponse", "guessedtype": "function"}, "date": {"params": [{"type": "Object", "name": "data", "description": "  row data"}, {"type": "String", "name": "field", "description": "  field name"}, {"type": "Node", "name": "cellNode", "description": "  TD cell reference"}], "description": "Format a date field", "guessedname": "date", "guessedtype": "function"}, "bindUI": {"see": "Widget.bindUI", "guessedname": "bindUI", "guessedtype": "function"}, "initializer": {"params": [{"type": "Object", "name": "config", "description": "  Configuration object."}], "description": "Initializer, implemented for Y.Base", "guessedname": "initializer", "guessedtype": "function"}, "progress": {"description": "Display a percentage as a visual progress bar", "guessedname": "progress", "guessedtype": "function"}, "renderUI": {"see": "Widget.renderUI", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Y.Widget", "superclass": "Y.Widget", "file": "dp-table-body.js", "guessedtype": "property", "shortname": "TableBase", "properties": {"CONTENT_TEMPLATE": {"type": "String", "description": "Body section does not require a contentBox because the content is bounded by the TBODY node.", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property"}, "ZEROROWS_TEMPLATE": {"type": "String", "description": "Row template for a status message, that spans the entire table.", "guessedname": "ZEROROWS_TEMPLATE", "guessedtype": "property"}, "cells": {"description": "Array of cells to render. \nDoes not necessarily have a 1:1 relationship with DataSource fields.\ncells are specified in the format { field: \"fieldname\", renderer: fnCellRenderer }", "guessedname": "cells", "guessedtype": "property"}, "ROW_TEMPLATE": {"type": "String", "description": "Standard row template.", "guessedname": "ROW_TEMPLATE", "guessedtype": "property"}, "CellRenderers": {"description": "Cell renderers are implemented as functions which return closures that are seeded with the configuration.\nExample closure: supplying a width parameter returns a function that renders a cell, and contains that width variable 'pre-seeded'.", "guessedname": "CellRenderers", "guessedtype": "property"}, "_ioHandlers": {"type": "Object", "description": "Object used for IO callback. Contains four functions to handle each stage of the IO request.", "guessedname": "_ioHandlers", "guessedtype": "property"}, "CELL_TEMPLATE": {"type": "String", "description": "Standard cell template.", "guessedname": "CELL_TEMPLATE", "guessedtype": "property"}, "Widget.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration for the Widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "_tbodyNode": {"type": "Node", "description": "Reference to the TBODY node containing this table data.", "guessedname": "_tbodyNode", "guessedtype": "property"}, "Widget.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.\n<p>\nCurrently used to apply class identifiers to the bounding box \nand to classify events fired by the widget.\n</p>", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Dynamic table class."}, "Y.DP.TableHeaders": {"name": "Y.DP.TableHeaders", "configs": {"columnsNode": {"default": "null", "type": "Node", "description": "Reference to the table row element containing the column headers", "guessedname": "columnsNode", "guessedtype": "property"}, "columns": {"default": "Empty array", "type": "Array", "description": "Array of objects representing columns with keys for title and width\nThis will be refactored into a columns object.", "guessedname": "columns", "guessedtype": "property"}, "theadNode": {"default": "null", "type": "Node", "description": "Reference to the table head element", "guessedname": "theadNode", "guessedtype": "property"}}, "namespace": "Y.DP", "module": "gallery-dp-table-headers", "events": {"columnsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "columnsChange", "description": "Fires when the value for the configuration attribute 'columns' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "columnsNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "columnsNodeChange", "description": "Fires when the value for the configuration attribute 'columnsNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "theadNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "theadNodeChange", "description": "Fires when the value for the configuration attribute 'theadNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TableHeaders", "methods": {"_uiSetColumnOut": {"params": [{"type": "Event", "name": "e", "description": ""}], "description": "Default handler for column mouseexit", "guessedname": "_uiSetColumnOut", "guessedtype": "function"}, "sort": {"public": "", "params": [{"type": "Node", "name": "node", "description": "  TH node to change sort direction for."}, {"type": "", "name": "direction", "description": " SORT_ASC | SORT_DESC [optional] sorting direction."}], "description": "Sort a column in the specified direction.\nNo specified direction will alternate the sort direction.\nThis is usually called by TableHeaders._defSortFn after a custom \"sort\" event.", "guessedname": "sort", "guessedtype": "function"}, "_uiSetRowSelection": {"protected": "", "description": "Set the row selection based on the selection attribute.\nTODO: this algorithm needs brain surgery.\nThe Y.Widget lifecycle doesn't seem to make sense in the case of row selection because we need to save the selected row nodes, then\nenumerate them for new selections, then add the classes sequentially.\nSo the uiSetXXXX convention does not apply here.", "guessedname": "_uiSetRowSelection", "guessedtype": "function"}, "_afterColumnsChange": {"protected": "", "description": "Handle a change in the columns attribute\nCauses columns to be re-rendered.", "guessedname": "_afterColumnsChange", "guessedtype": "function"}, "_defSortFn": {"params": [{"type": "Event", "name": "e", "description": ""}], "description": "Default handler for table:sort", "guessedname": "_defSortFn", "guessedtype": "function"}, "_renderTableColumns": {"protected": "", "description": "Enhance table columns with styling and sorting", "guessedname": "_renderTableColumns", "guessedtype": "function"}, "initializer": {"params": [{"type": "Object", "name": "config", "description": "  Configuration object."}], "description": "Initializer, implemented for Y.Base", "guessedname": "initializer", "guessedtype": "function"}, "_uiSetColumnOver": {"params": [{"type": "Event", "name": "e", "description": ""}], "description": "Default handler for column mouseenter", "guessedname": "_uiSetColumnOver", "guessedtype": "function"}, "_uiSetRowHoverStyle": {"returns": "", "params": [{"type": "Event", "name": "e", "description": ""}], "description": "Add the hover style to a row.", "guessedname": "_uiSetRowHoverStyle", "guessedtype": "function"}, "_uiRemoveRowHoverStyle": {"returns": "", "params": [{"type": "Event", "name": "e", "description": ""}], "description": "Remove the hover style from a row.", "guessedname": "_uiRemoveRowHoverStyle", "guessedtype": "function"}, "_defQueryUpdateFn": {"params": [{"type": "Event", "name": "e", "description": ""}], "description": "Default handler for CustomEvent queryUpdate", "guessedname": "_defQueryUpdateFn", "guessedtype": "function"}, "_defRowSelectFn": {"params": [{"type": "Event", "name": "e", "description": ""}], "description": "Default handler for \"rowSelect\" event.\nTODO: afterSelectionChange implementation of this.", "guessedname": "_defRowSelectFn", "guessedtype": "function"}, "columns": {"params": [{"type": "Node", "name": "srcNode", "description": ""}], "description": "Parse table column headers (TH) into a columns array.", "guessedname": "columns", "guessedtype": "function"}}, "file": "dp-table-headers.js", "guessedtype": "property", "shortname": "TableHeaders", "properties": {"CONTENT_TEMPLATE": {"static": "", "description": "No content template because this is encompassed by a table tag.", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property"}, "COLUMN_SORT_INDICATOR_TEMPLATE": {"type": "String", "static": "", "description": "Contains the sort indicator graphic", "guessedname": "COLUMN_SORT_INDICATOR_TEMPLATE", "guessedtype": "property"}, "COLUMN_LABEL_TEMPLATE": {"type": "String", "static": "", "description": "Column text content will be wrapped in this element.", "guessedname": "COLUMN_LABEL_TEMPLATE", "guessedtype": "property"}}, "description": "Table Column Headers\nProgressive enhancement of TH elements to provide sorting functionality."}}, "version": "1.0.0", "namespaces": ["Y.DP"]}